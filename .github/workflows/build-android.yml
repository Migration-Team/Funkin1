# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"

  buildAndroid:
    name: buildAndroid
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Setup Android NDK
        uses: nttld/setup-ndk@main
        id: setup-ndk
        with:
          ndk-version: r15c

      - name: Setup Java JDK
        uses: actions/setup-java@main
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.5

      - name: Restore Previous Cache
        id: cache-debug-build-android-restore-gcc
        uses: actions/cache/restore@main
        with:
          path: |
            ~/haxelib
            ~/.gradle
            export/release/android/haxe
            export/release/android/obj
          key: cache-android-build-gcc

      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib git hxcpp https://github.com/FunkinDroidTeam/hxcpp
          haxelib install hxp 1.2.2
          haxelin git json2object https://github.com/FunkinCrew/json2object
          haxelib git lime https://github.com/FunkinDroidTeam/lime
          haxelib git mconsole https://github.com/massive-oss/mconsole
          haxelib git mcover https://github.com/massive-oss/mcover
          haxelib git mockatoo https://github.com/FunkinCrew/mockatoo
          haxelib git munit https://github.com/FunkinCrew/MassiveUnit
          haxelib git polymod https://github.com/larsiusprime/polymod
          haxelib git openfl https://github.com/FunkinCrew/openfl
          haxelib git thx.core https://github.com/FunkinCrew/thx.core
          haxelib git thx.semver https://github.com/FunkinCrew/thx.semver
          haxelib install flixel-tools
          haxelib git flixel-ui https://github.com/HaxeFlixel/flixel-ui
          haxelib git flixel-addons https://github.com/FunkinCrew/flixel-addons
          haxelib install hscript 2.5.0
          haxelib install flixel-text-input 1.1.0
          haxelib git flixel https://github.com/FunkinCrew/flixel
          haxelib git flxanimate https://github.com/FunkinCrew/flxanimate
          haxelib git FlxPartialSound https://github.com/FunkinDroidTeam/FlxPartialSound
          haxelib install format 3.5.0
          haxelib git funkin.vis https://github.com/FunkinCrew/funkVis
          haxelib git grig.audio https://gitlab.com/haxe-grig/grig.audio.git
          haxelib install hamcrest 3.0.0
          haxelib git haxeui-core https://github.com/haxeui/haxeui-core
          haxelib git haxeui-flixel https://github.com/haxeui/haxeui-flixel
          haxelib install hxvlc 1.5.5
          haxelib install extension-androidtools https://github.com/MAJigsaw77/extension-androidtools
          haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc
          haxelib git hxcpp-debug-server https://github.com/FunkinCrew/hxcpp-debugger
          haxelib list
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION

      - name: Setup Lime
        run: |
          haxelib run lime setup -alias -y
          haxelib run lime config ANDROID_SDK $ANDROID_HOME
          haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_HOME
          haxelib run lime config JAVA_HOME $JAVA_HOME
          haxelib run lime config ANDROID_SETUP true
          haxelib set lime 8.0.2
          haxelib set openfl 9.2.2
          haxelib set flixel 5.2.2
          haxelib set flixel-addons 3.0.2
          haxelib set hxcpp 4.2.1
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Compile
        run: haxelib run lime build android -D officialBuild -D NO_PRECOMPILED_HEADERS -D mobileC -release
        env:
          cert_pass: nullfunni
          cert_alias_pass: nullfunni

      - name: Clear Previous Cache
        uses: actions/github-script@main
        with:
          script: |
            try {
            	const caches = await github.rest.actions.getActionsCacheList({
            		owner: context.repo.owner,
            		repo: context.repo.repo,
            	})
            	if (typeof caches.data.actions_caches != null && caches.data.actions_caches.length > 0) {
            		for (const cache of caches.data.actions_caches) {
            			if (cache.key == "cache-android-build-gcc") {
            				console.log('Clearing ' + cache.key + '...')
            				await github.rest.actions.deleteActionsCacheById({
            					owner: context.repo.owner,
            					repo: context.repo.repo,
            					cache_id: cache.id,
            				})
            				console.log("Previous Cache Cleared!")
            			}
            		}
            	}
            } catch (error) {
            	console.log(error.message);
            }

      - name: Save Current Cache
        id: cache-release-build-android-save-gcc
        uses: actions/cache/save@main
        with:
          path: |
            ~/haxelib
            ~/.gradle
            export/release/android/haxe
            export/release/android/obj
          key: cache-android-build-gcc

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: androidBuild-gcc
          path: export/release/android/bin/app/build/outputs/apk/debug
          if-no-files-found: error
